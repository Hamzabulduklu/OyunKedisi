@model IEnumerable<OyunKedisi.Models.Oyunlar>

@{
    ViewData["Title"] = "Oyunlar";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    :root {
        --primary-purple: #6B46C1;
        --light-purple: #9F7AEA;
        --primary-orange: #ED8936;
        --light-orange: #FBD38D;
    }

    .page-header {
        background: linear-gradient(135deg, var(--primary-purple), var(--light-purple));
        padding: 3rem 0;
        margin-bottom: 2rem;
        color: white;
        text-align: center;
    }

    .page-title {
        font-size: 2.5rem;
        font-weight: 700;
        margin-bottom: 1rem;
    }

    .page-description {
        font-size: 1.1rem;
        opacity: 0.9;
        margin-bottom: 2rem;
    }

    .filter-bar {
        background: white;
        padding: 1rem;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.05);
        margin-bottom: 2rem;
        display: flex;
        gap: 1rem;
        align-items: center;
    }

    .filter-input {
        flex: 1;
        padding: 0.75rem;
        border: 2px solid #e2e8f0;
        border-radius: 8px;
        font-size: 1rem;
        transition: all 0.2s ease;
    }

    .filter-input:focus {
        border-color: var(--primary-purple);
        outline: none;
        box-shadow: 0 0 0 3px rgba(107, 70, 193, 0.1);
    }

    .filter-select {
        padding: 0.75rem;
        border: 2px solid #e2e8f0;
        border-radius: 8px;
        font-size: 1rem;
        background: white;
        cursor: pointer;
        transition: all 0.2s ease;
    }

    .filter-select:focus {
        border-color: var(--primary-purple);
        outline: none;
        box-shadow: 0 0 0 3px rgba(107, 70, 193, 0.1);
    }

    .game-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 1.5rem;
    }

    .game-card {
        background: white;
        border-radius: 12px;
        overflow: hidden;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        transition: transform 0.2s ease;
        position: relative;
    }

    .game-card:hover {
        transform: translateY(-4px);
    }

    .game-image {
        position: relative;
        padding-top: 56.25%;
        overflow: hidden;
    }

    .game-image img {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .favorite-btn {
        position: absolute;
        top: 10px;
        right: 10px;
        width: 36px;
        height: 36px;
        border-radius: 50%;
        background: rgba(255, 255, 255, 0.9);
        border: none;
        color: #666;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.2s ease;
        z-index: 1;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .favorite-btn:hover {
        background: white;
        transform: scale(1.1);
    }

    .favorite-btn i {
        font-size: 1.1rem;
    }

    .favorite-btn.favorited {
        background: #fef3c7;
        color: #d97706;
    }

    .favorite-btn.favorited:hover {
        background: #d97706;
        color: white;
    }

    .game-content {
        padding: 1rem;
    }

    .game-title {
        font-size: 1.25rem;
        font-weight: 600;
        color: var(--primary-purple);
        margin-bottom: 0.5rem;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }

    .game-meta {
        display: flex;
        justify-content: space-between;
        align-items: center;
        font-size: 0.875rem;
        color: #666;
    }

    .game-user {
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .game-user img {
        width: 24px;
        height: 24px;
        border-radius: 50%;
    }

    .game-actions {
        display: flex;
        gap: 0.5rem;
        margin-top: 0.75rem;
        padding-top: 0.75rem;
        border-top: 1px solid #eee;
    }

    .btn-action {
        flex: 1;
        padding: 0.5rem;
        border: none;
        border-radius: 6px;
        background: #f8f9fa;
        color: #666;
        font-size: 0.875rem;
        cursor: pointer;
        transition: all 0.2s ease;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 0.5rem;
    }

    .btn-action:hover {
        background: var(--primary-purple);
        color: white;
    }

    .btn-action i {
        font-size: 1rem;
    }

    .empty-state {
        text-align: center;
        padding: 3rem;
        background: white;
        border-radius: 12px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.05);
    }

    .empty-state i {
        font-size: 4rem;
        color: var(--primary-purple);
        opacity: 0.5;
        margin-bottom: 1rem;
    }

    .empty-state h3 {
        color: var(--primary-purple);
        margin-bottom: 1rem;
    }

    .empty-state p {
        color: #666;
        margin-bottom: 2rem;
    }

    @@media (max-width: 768px) {
        .page-title {
            font-size: 2rem;
        }

        .filter-bar {
            flex-direction: column;
        }

        .filter-input,
        .filter-select {
            width: 100%;
        }

        .game-grid {
            grid-template-columns: 1fr;
        }
    }

    .no-image {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: var(--gray);
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        color: var(--primary-purple);
    }

    .no-image i {
        font-size: 2rem;
        margin-bottom: 0.5rem;
    }

    .no-image span {
        font-size: 0.9rem;
        opacity: 0.8;
    }

    .game-image {
        text-decoration: none;
        color: inherit;
    }

    .game-image:hover {
        opacity: 0.9;
    }

    .game-image img {
        transition: transform 0.3s ease;
    }

    @@keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    .game-image:hover img {
        transform: scale(1.05);
    }
</style>

<div class="page-header">
    <div class="container">
        <h1 class="page-title">Oyunlar</h1>
        <p class="page-description">En yeni ve popüler oyunları keşfedin, kendi oyunlarınızı paylaşın.</p>
        @if (User.Identity.IsAuthenticated)
        {
            <a asp-action="Create" class="btn btn-light">
                <i class="fas fa-plus"></i> Yeni Oyun Ekle
            </a>
        }
    </div>
</div>

<div class="container">
    <div class="filter-bar">
        <input type="text" id="search" class="filter-input" placeholder="Oyun ara...">
        <select id="sort" class="filter-select">
            <option value="name">İsme Göre</option>
            <option value="favorites">Favori Sayısına Göre</option>
        </select>
    </div>

    @if (!Model.Any())
    {
        <div class="empty-state">
            <i class="fas fa-gamepad"></i>
            <h3>Henüz Oyun Yok</h3>
            <p>Henüz hiç oyun eklenmemiş. İlk oyunu ekleyen siz olun!</p>
            @if (User.Identity.IsAuthenticated)
            {
                <a asp-action="Create" class="btn btn-primary">
                    <i class="fas fa-plus"></i> Yeni Oyun Ekle
                </a>
            }
            else
            {
                <a asp-controller="Users" asp-action="Login" class="btn btn-primary">
                    <i class="fas fa-sign-in-alt"></i> Giriş Yap
                </a>
            }
        </div>
    }
    else
    {
        <div class="game-grid">
            @foreach (var item in Model)
            {
                <div class="game-card">
                    <button class="favorite-btn" data-game-id="@item.Id" title="Favorilere Ekle">
                        <i class="far fa-star"></i>
                    </button>
                    @if (!string.IsNullOrEmpty(item.OyunLinki))
                    {
                        <a href="@item.OyunLinki" target="_blank" class="game-image" title="@item.OyunAdi oyununa git">
                            @if (!string.IsNullOrEmpty(item.OyunFotograflari))
                            {
                                <img src="@item.OyunFotograflari" alt="@item.OyunAdi" loading="lazy">
                            }
                            else
                            {
                                <div class="no-image">
                                    <i class="fas fa-gamepad"></i>
                                    <span>Fotoğraf Yok</span>
                                </div>
                            }
                        </a>
                    }
                    else
                    {
                        <div class="game-image">
                            @if (!string.IsNullOrEmpty(item.OyunFotograflari))
                            {
                                <img src="@item.OyunFotograflari" alt="@item.OyunAdi" loading="lazy">
                            }
                            else
                            {
                                <div class="no-image">
                                    <i class="fas fa-gamepad"></i>
                                    <span>Fotoğraf Yok</span>
                                </div>
                            }
                        </div>
                    }
                    <div class="game-content">
                        <h3 class="game-title">@item.OyunAdi</h3>
                        <div class="game-meta">
                            <div class="game-user">
                                <img src="https://ui-avatars.com/api/?name=@item.User.KullaniciAdi" alt="@item.User.KullaniciAdi">
                                <span>@item.User.KullaniciAdi</span>
                            </div>
                        </div>
                        @if (User.Identity.IsAuthenticated && (User.IsInRole("Admin") || item.UserId.ToString() == User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value))
                        {
                            <div class="game-actions">
                                <a asp-action="Edit" asp-route-id="@item.Id" class="btn-action" title="Düzenle">
                                    <i class="fas fa-edit"></i>
                                    <span>Düzenle</span>
                                </a>
                                <a asp-action="Delete" asp-route-id="@item.Id" class="btn-action text-danger" title="Sil">
                                    <i class="fas fa-trash"></i>
                                    <span>Sil</span>
                                </a>
                            </div>
                        }
                        <!-- Yorumlar Alanı Başlangıç -->
                        <div class="mt-3">
                            <h6 class="fw-bold">Yorumlar</h6>
                            <div class="mb-2" style="max-height: 120px; overflow-y: auto;">
                                @if (item.Yorumlars != null && item.Yorumlars.Any())
                                {
                                    foreach (var yorum in item.Yorumlars.OrderByDescending(y => y.Id))
                                    {
                                        <div class="border-bottom pb-2 mb-2">
                                            <div class="d-flex align-items-center mb-1">
                                                <img src="https://ui-avatars.com/api/?name=@yorum.User?.KullaniciAdi" class="rounded-circle me-2" width="24" height="24" alt="@yorum.User?.KullaniciAdi">
                                                <span class="fw-semibold">@yorum.User?.KullaniciAdi</span>
                                            </div>
                                            <div class="ps-4 small">@yorum.Yorumlar1</div>
                                        </div>
                                    }
                                }
                                else
                                {
                                    <div class="text-muted small">Henüz yorum yok.</div>
                                }
                            </div>
                            <div class="yorum-ekle-kutu p-3 bg-light rounded shadow-sm">
                                <h6 class="fw-bold mb-2" style="font-size:1rem;">Yorum Yaz</h6>
                                @if (User.Identity.IsAuthenticated)
                                {
                                    <form asp-controller="Yorumlars" asp-action="Create" method="post" class="d-flex align-items-end gap-2">
                                        <input type="hidden" name="OyunId" value="@item.Id" />
                                        <input type="hidden" name="UserId" value="@User.FindFirst("UserId")?.Value" />
                                        <textarea name="Yorumlar1" class="form-control form-control-sm" rows="2" placeholder="Yorumunuzu yazın..." required style="resize:none;max-width:70%"></textarea>
                                        <button type="submit" class="btn btn-sm btn-primary"><i class="fas fa-paper-plane"></i> Gönder</button>
                                    </form>
                                }
                                else
                                {
                                    <div class="alert alert-warning py-2 px-3 mb-0" style="font-size:0.95rem;">Yorum yazmak için <a href='/Users/Login'>giriş yapın</a>.</div>
                                }
                            </div>
                        </div>
                        <!-- Yorumlar Alanı Bitiş -->
                    </div>
                </div>
            }
        </div>
    }
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', async function() {
            const searchInput = document.getElementById('search');
            const sortSelect = document.getElementById('sort');
            const gameGrid = document.querySelector('.game-grid');
            const gameCards = Array.from(document.querySelectorAll('.game-card'));
            let userFavorites = [];

            // Kullanıcı giriş yapmışsa favori durumlarını yükle
            if (document.querySelector('input[name="__RequestVerificationToken"]')) {
                try {
                    const response = await fetch('/Favoris/GetUserFavorites');
                    if (response.ok) {
                        userFavorites = await response.json();
                        // Favori durumlarını güncelle
                        gameCards.forEach(card => {
                            const gameId = parseInt(card.querySelector('.favorite-btn').dataset.gameId);
                            if (userFavorites.includes(gameId)) {
                                const btn = card.querySelector('.favorite-btn');
                                const icon = btn.querySelector('i');
                                btn.classList.add('favorited');
                                icon.classList.remove('far');
                                icon.classList.add('fas');
                            }
                        });
                    }
                } catch (error) {
                    console.error('Favori durumları yüklenirken hata oluştu:', error);
                }
            }

            // Arama fonksiyonu
            searchInput.addEventListener('input', function(e) {
                const searchTerm = e.target.value.toLowerCase();
                filterGames(searchTerm);
            });

            // Sıralama fonksiyonu
            sortSelect.addEventListener('change', function(e) {
                const sortBy = e.target.value;
                sortGames(sortBy);
            });

            function filterGames(searchTerm) {
                gameCards.forEach(card => {
                    const title = card.querySelector('.game-title').textContent.toLowerCase();
                    if (title.includes(searchTerm)) {
                        card.style.display = '';
                    } else {
                        card.style.display = 'none';
                    }
                });
            }

            function sortGames(sortBy) {
                const sortedCards = [...gameCards].sort((a, b) => {
                    switch(sortBy) {
                        case 'name':
                            return a.querySelector('.game-title').textContent.localeCompare(
                                b.querySelector('.game-title').textContent
                            );
                        case 'favorites':
                            // Burada favori sayısına göre sıralama yapılacak
                            return 0;
                        default:
                            return 0;
                    }
                });

                gameGrid.innerHTML = '';
                sortedCards.forEach(card => gameGrid.appendChild(card));
            }

            // Favori butonu işlemleri
            document.querySelectorAll('.favorite-btn').forEach(button => {
                button.addEventListener('click', async function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    
                    const gameId = parseInt(this.dataset.gameId);
                    const icon = this.querySelector('i');
                    
                    // Önce UI'ı güncelle
                    this.classList.toggle('favorited');
                    icon.classList.toggle('far');
                    icon.classList.toggle('fas');
                    
                    // Favori listesini güncelle
                    const index = userFavorites.indexOf(gameId);
                    if (index === -1) {
                        userFavorites.push(gameId);
                    } else {
                        userFavorites.splice(index, 1);
                    }
                    
                    try {
                        const response = await fetch(`/Favoris/ToggleFavorite/${gameId}`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                            }
                        });
                        
                        if (!response.ok) {
                            // İşlem başarısız olursa UI'ı geri al
                            this.classList.toggle('favorited');
                            icon.classList.toggle('far');
                            icon.classList.toggle('fas');
                            
                            if (response.status === 401) {
                                window.location.href = '/Users/Login';
                            }
                        }
                    } catch (error) {
                        // Hata durumunda UI'ı geri al
                        this.classList.toggle('favorited');
                        icon.classList.toggle('far');
                        icon.classList.toggle('fas');
                        console.error('Favori işlemi sırasında bir hata oluştu:', error);
                    }
                });
            });
        });
    </script>
}
